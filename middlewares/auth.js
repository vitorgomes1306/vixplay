import jwt from 'jsonwebtoken'; // Importa a biblioteca jsonwebtoken
import dotenv from 'dotenv'; // Importa dotenv para carregar vari√°veis do arquivo .env

dotenv.config(); // Carrega as vari√°veis do .env

const JWT_SECRET = process.env.JWT_SECRET; // Pega a chave secreta do .env

if (!JWT_SECRET) {
    throw new Error('‚ùå A chave JWT_SECRET n√£o foi configurada no arquivo .env!');
}

// Middleware de autentica√ß√£o
const auth = (req, res, next) => {
    console.log(`üîí Middleware de autentica√ß√£o para a rota: ${req.path}`);
    
    // Obt√©m o token do cabe√ßalho Authorization
    const token = req.headers.authorization;

    if (!token) {
        console.error('‚ùå Token de autentica√ß√£o n√£o fornecido.');
        return res.status(401).json({ message: 'Acesso negado! Token de autentica√ß√£o obrigat√≥rio.' });
    }

    try {
        // Remove o prefixo "Bearer " (se houver) e verifica o token
        const decoded = jwt.verify(token.replace('Bearer ', ''), JWT_SECRET);

        // Define o ID do usu√°rio decodificado no objeto `req`
        req.userId = decoded.id;
        console.log(`‚úÖ Token validado com sucesso para o usu√°rio ID: ${decoded.id}`);
        next(); // Continua para a pr√≥xima etapa
    } catch (err) {
        console.error('‚ùå Erro ao verificar token:', err.message);
        return res.status(401).json({ message: 'Token inv√°lido ou expirado.' });
    }
};

export default auth;